{"/home/travis/build/npmtest/node-npmtest-generator-chrome-extension/test.js":"/* istanbul instrument in package npmtest_generator_chrome_extension */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-chrome-extension/lib.npmtest_generator_chrome_extension.js":"/* istanbul instrument in package npmtest_generator_chrome_extension */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_generator_chrome_extension = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_generator_chrome_extension = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-chrome-extension/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-generator-chrome-extension && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_generator_chrome_extension */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_generator_chrome_extension\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_generator_chrome_extension.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_generator_chrome_extension.rollup.js'] =\n            local.assetsDict['/assets.npmtest_generator_chrome_extension.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_generator_chrome_extension.__dirname + '/lib.npmtest_generator_chrome_extension.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-chrome-extension/node_modules/generator-chrome-extension/app/index.js":"'use strict';\nvar fs = require('fs');\nvar path = require('path');\nvar spawn = require('child_process').spawn;\nvar yeoman = require('yeoman-generator');\nvar _s = require('underscore.string');\nvar mkdirp = require('mkdirp');\nvar chromeManifest = require('./chrome-manifest');\n\nmodule.exports = yeoman.Base.extend({\n  constructor: function (args, options, config) {\n    var testLocal;\n\n    yeoman.Base.apply(this, arguments);\n\n    // prepare options\n    this.option('test-framework', {\n      desc: 'Test framework to be invoked',\n      type: String,\n      defaults: 'mocha'\n    });\n\n    this.option('babel', {\n      type: Boolean,\n      defaults: true,\n      desc: 'Compile ES2015 using Babel'\n    });\n\n    this.option('sass', {\n      desc: 'Use Sass',\n      type: Boolean,\n      defaults: false\n    });\n\n    this.option('all-permissions', {\n      type: Boolean,\n      defaults: false,\n      desc: 'All of permissions will be shown'\n    });\n\n    // load package\n    this.pkg = require('../package.json');\n\n    // set source root path to templates\n    this.sourceRoot(path.join(__dirname, 'templates'));\n\n    // set local data with appname\n    this.locale = {\n      name: this.appname,\n      description: ''\n    };\n\n    this.srcScript = 'app/scripts' + (this.options.babel ? '.babel/' : '/');\n\n    if (this.options['test-framework'] === 'mocha') {\n      testLocal = require.resolve('generator-mocha/generators/app/index.js');\n    } else if (this.options['test-framework'] === 'jasmine') {\n      testLocal = require.resolve('generator-jasmine/generators/app/index.js');\n    }\n\n    this.composeWith(this.options['test-framework'] + ':app', {\n      options: {\n        'skip-install': this.options['skip-install']\n      }\n    }, {\n      local: testLocal\n    });\n\n    // copy source files to scripts or scripts.babel\n    this.copyjs = function copyjs(src, dest) {\n      if (!dest) {\n        dest = src;\n      }\n\n      this.fs.copyTpl(\n        this.templatePath('scripts/' + src),\n        this.destinationPath(this.srcScript + dest),\n        {\n          babel: this.options.babel\n        }\n      );\n    };\n  },\n\n  askFor: function (argument) {\n    var cb = this.async();\n\n    var prompts = [\n      {\n        name: 'name',\n        message: 'What would you like to call this extension?',\n        default: (this.appname) ? this.appname : 'myChromeApp'\n      },\n      {\n        name: 'description',\n        message: 'How would you like to describe this extension?',\n        default: 'My Chrome Extension'\n      },\n      {\n        type: 'list',\n        name: 'uiAction',\n        message: 'Would you like to use UI Action?',\n        choices: chromeManifest.uiActionChoices\n      },\n      {\n        type: 'checkbox',\n        name: 'uiFeatures',\n        message: 'Would you like more UI Features?',\n        choices: chromeManifest.uiFeatureChoices\n      },\n      {\n        type: 'checkbox',\n        name: 'permissions',\n        message: 'Would you like to set permissions?',\n        choices: chromeManifest.permissionChoices(this.options['all-permissions'])\n      }\n    ];\n\n    this.prompt( prompts ).then(function(answers) {\n      var isChecked = function (choices, value) {\n        return choices.indexOf(value) > -1;\n      };\n\n      // store information for app\n      this.appname = this.locale.name = answers.name.replace(/\\\"/g, '\\\\\"');\n      this.locale.description = answers.description;\n\n      // prepare options\n      this.options.manifest = {\n        fields: answers.uiFeatures,\n        permissions: answers.permissions\n      };\n\n      if (answers.uiAction !== 'No') {\n        this.options.manifest.fields = this.options.manifest.fields.concat([answers.uiAction]);\n        this.options.uiAction = /^browser/.test(answers.uiAction) ? 'browser_action' : 'page_action';\n      }\n\n      this.options.permissions = answers.permissions;\n      this.options.optionsUI = isChecked(answers.uiFeatures, 'optionsUI');\n      this.options.contentscript = isChecked(answers.uiFeatures, 'contentScripts');\n\n      cb();\n    }.bind(this));\n  },\n\n  app: function () {\n    mkdirp('app');\n    mkdirp('app/bower_components');\n  },\n\n  gulpfile: function () {\n    this.fs.copyTpl(\n      this.templatePath('gulpfile.babel.js'),\n      this.destinationPath('gulpfile.babel.js'),\n      {\n        date: (new Date).toISOString().split('T')[0],\n        appname: this.appname,\n        pkg: this.pkg,\n        uiAction: this.options.uiAction,\n        babel: this.options.babel,\n        sass: this.options.sass,\n        testFramework: this.options['test-framework'],\n      }\n    );\n  },\n\n  packageJSON: function () {\n    this.fs.copyTpl(\n      this.templatePath('_package.json'),\n      this.destinationPath('package.json'),\n      {\n        appname: _s.slugify(this.appname),\n        babel: this.options.babel,\n        sass: this.options.sass,\n        testFramework: this.options['test-framework'],\n      }\n    );\n  },\n\n  git: function () {\n    this.fs.copyTpl(\n      this.templatePath('gitignore'),\n      this.destinationPath('.gitignore'),\n      {\n        babel: this.options.babel,\n        sass: this.options.sass\n      }\n    );\n\n    this.fs.copy(\n      this.templatePath('gitattributes'),\n      this.destinationPath('.gitattributes')\n    );\n  },\n\n  bower: function () {\n    this.copy('bowerrc', '.bowerrc');\n    this.fs.copyTpl(\n      this.templatePath('_bower.json'),\n      this.destinationPath('bower.json'),\n      {\n        name: _s.slugify(this.appname)\n      }\n    );\n  },\n\n  editorConfig: function () {\n    this.fs.copy(\n      this.templatePath('editorconfig'),\n      this.destinationPath('.editorconfig')\n    );\n  },\n\n  manifest: function () {\n    // create manifest with basic field\n    this.manifest = chromeManifest.createManifest(this.options.manifest);\n\n    // update title of popup\n    if (this.options.uiAction) {\n      this.manifest[this.options.uiAction].default_title = this.appname;\n    }\n\n    // update keyword of omnibox\n    if (this.options.omnibox) {\n      this.manifest.omnibox.keyword = this.manifest.name;\n    }\n\n    this.fs.writeJSON(this.destinationPath('app/manifest.json'), this.manifest);\n  },\n\n  actions: function () {\n    if (!this.options.uiAction) {\n      return;\n    }\n\n    this.fs.copy(\n      this.templatePath('popup.html'),\n      this.destinationPath('app/popup.html')\n    );\n\n    this.copyjs('popup.js');\n\n    this.fs.copy(\n      this.templatePath('images/icon-19.png'),\n      this.destinationPath('app/images/icon-19.png')\n    );\n\n    this.fs.copy(\n      this.templatePath('images/icon-38.png'),\n      this.destinationPath('app/images/icon-38.png')\n    );\n  },\n\n  eventpage: function () {\n    var backgroundjs = 'background.js';\n\n    if (this.options.uiAction) {\n      backgroundjs = 'background.' + this.options.uiAction + '.js';\n    }\n\n    this.copyjs(backgroundjs, 'background.js');\n    this.copyjs('chromereload.js');\n  },\n\n  optionsUI: function () {\n    if (!this.options.optionsUI) {\n      return;\n    }\n\n    this.fs.copy(\n      this.templatePath('options.html'),\n      this.destinationPath('app/options.html')\n    );\n\n    this.copyjs('options.js');\n  },\n\n  contentscript: function () {\n    if (!this.options.contentscript) {\n      return;\n    }\n\n    this.copyjs('contentscript.js');\n  },\n\n  babel: function () {\n    this.fs.copy(\n      this.templatePath('babelrc'),\n      this.destinationPath('.babelrc')\n    );\n  },\n\n  mainStylesheet: function () {\n    if (!this.options.uiAction && !this.options.optionsUI) {\n      return;\n    }\n\n    var cssPath = 'styles' + (this.options.sass ? '.scss' : '');\n    var cssFile = 'main.' + (this.options.sass ? 's' : '') + 'css';\n\n    this.fs.copy(\n      this.templatePath(path.join('styles', cssFile)),\n      this.destinationPath(path.join('app', cssPath, cssFile))\n    );\n  },\n\n  assets: function () {\n    this.fs.copyTpl(\n      this.templatePath('_locales/en/messages.json'),\n      this.destinationPath('app/_locales/en/messages.json'),\n      this.locale\n    );\n\n    this.fs.copy(\n      this.templatePath('images/icon-16.png'),\n      this.destinationPath('app/images/icon-16.png')\n    );\n\n    this.fs.copy(\n      this.templatePath('images/icon-128.png'),\n      this.destinationPath('app/images/icon-128.png')\n    );\n  },\n\n  install: function () {\n    if (!this.options['skip-install']) {\n      this.installDependencies({\n        skipMessage: this.options['skip-install-message'],\n        skipInstall: this.options['skip-install']\n      });\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-generator-chrome-extension/node_modules/generator-chrome-extension/app/chrome-manifest.js":"'use strict';\n\nvar headerize = require('headerize');\nvar Manifest = require('chrome-manifest');\n\nvar chromePrimaryPermissions = [\n  'hostPermissions',\n  'background',\n  'bookmarks',\n  'clipboardRead',\n  'clipboardWrite',\n  'contentSettings',\n  'contextMenus',\n  'cookies',\n  'debugger',\n  'history',\n  'idle',\n  'management',\n  'notifications',\n  'pageCapture',\n  'tabs',\n  'topSites',\n  'storage',\n  'webNavigation',\n  'webRequest',\n  'webRequestBlocking'\n];\n\nvar chromeUIActions = [\n  'No',\n  'browserAction',\n  'pageAction'\n];\n\nvar chromeUIFeatures = [\n  'optionsUI',\n  'contentScripts',\n  'omnibox'\n];\n\nfunction getChoices(target) {\n  return target.map(function (p) {\n    return {\n      value: p,\n      name: headerize(p),\n      checked: false\n    };\n  });\n}\n\nmodule.exports = {\n  primaryPermissions: chromePrimaryPermissions,\n  uiActions: chromeUIActions,\n  uiFeatures: chromeUIFeatures,\n  permissionChoices: function (allOfPermissions) {\n    var permissions = chromePrimaryPermissions;\n\n    if (allOfPermissions) {\n      permissions = permissions.concat(Object.keys(Manifest.queryMetadata({\n        channel: 'stable',\n        extensionTypes: ['extension']\n      }).permissions));\n    }\n\n    return getChoices(permissions);\n  },\n  uiActionChoices: function () {\n    return getChoices(chromeUIActions);\n  },\n  uiFeatureChoices: function () {\n    return getChoices(chromeUIFeatures);\n  },\n  createManifest: function (opts) {\n    var manifest = new Manifest({\n      'name': '__MSG_appName__',\n      'version': '0.0.1',\n      'manifest_version': 2,\n      'description': '__MSG_appDescription__',\n      'icons': {\n        '16': 'images/icon-16.png',\n        '128': 'images/icon-128.png'\n      },\n      'default_locale': 'en',\n      'background': {\n        'scripts': [\n          'scripts/chromereload.js',\n          'scripts/background.js'\n        ]\n      }\n    });\n\n    manifest.merge(new Manifest({\n      fields: opts.fields,\n      permissions: opts.permissions\n    }));\n\n    return manifest;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-chrome-extension/node_modules/generator-chrome-extension/app/templates/gulpfile.babel.js":"// generated on <%= date %> using <%= pkg.name %> <%= pkg.version %>\nimport gulp from 'gulp';\nimport gulpLoadPlugins from 'gulp-load-plugins';\nimport del from 'del';\nimport runSequence from 'run-sequence';\nimport {stream as wiredep} from 'wiredep';\n\nconst $ = gulpLoadPlugins();\n\ngulp.task('extras', () => {\n  return gulp.src([\n    'app/*.*',\n    'app/_locales/**',<% if (babel) { %>\n    '!app/scripts.babel',<% } %>\n    '!app/*.json',\n    '!app/*.html',<% if (sass) { %>\n    '!app/styles.scss'<% } %>\n  ], {\n    base: 'app',\n    dot: true\n  }).pipe(gulp.dest('dist'));\n});\n\nfunction lint(files, options) {\n  return () => {\n    return gulp.src(files)\n      .pipe($.eslint(options))\n      .pipe($.eslint.format());\n  };\n}\n\ngulp.task('lint', lint('app/scripts<% if (babel) { %>.babel<% } %>/**/*.js', {\n  env: {\n    es6: <% if (babel) { %>true<% } else { %>false<% } %>\n  }\n}));\n\ngulp.task('images', () => {\n  return gulp.src('app/images/**/*')\n    .pipe($.if($.if.isFile, $.cache($.imagemin({\n      progressive: true,\n      interlaced: true,\n      // don't remove IDs from SVGs, they are often used\n      // as hooks for embedding and styling\n      svgoPlugins: [{cleanupIDs: false}]\n    }))\n    .on('error', function (err) {\n      console.log(err);\n      this.end();\n    })))\n    .pipe(gulp.dest('dist/images'));\n});<% if (sass) { %>\ngulp.task('styles', () => {\n  return gulp.src('app/styles.scss/*.scss')\n    .pipe($.plumber())\n    .pipe($.sass.sync({\n      outputStyle: 'expanded',\n      precision: 10,\n      includePaths: ['.']\n    }).on('error', $.sass.logError))\n    .pipe(gulp.dest('app/styles'));\n});<% } %>\n\ngulp.task('html', <% if (sass) { %>['styles'],<% } %> () => {\n  return gulp.src('app/*.html')\n    .pipe($.useref({searchPath: ['.tmp', 'app', '.']}))\n    .pipe($.sourcemaps.init())\n    .pipe($.if('*.js', $.uglify()))\n    .pipe($.if('*.css', $.cleanCss({compatibility: '*'})))\n    .pipe($.sourcemaps.write())\n    .pipe($.if('*.html', $.htmlmin({removeComments: true, collapseWhitespace: true})))\n    .pipe(gulp.dest('dist'));\n});\n\ngulp.task('chromeManifest', () => {\n  return gulp.src('app/manifest.json')\n    .pipe($.chromeManifest({\n      buildnumber: true,\n      background: {\n        target: 'scripts/background.js',\n        exclude: [\n          'scripts/chromereload.js'\n        ]\n      }\n  }))\n  .pipe($.if('*.css', $.cleanCss({compatibility: '*'})))\n  .pipe($.if('*.js', $.sourcemaps.init()))\n  .pipe($.if('*.js', $.uglify()))\n  .pipe($.if('*.js', $.sourcemaps.write('.')))\n  .pipe(gulp.dest('dist'));\n});\n<% if (babel) { %>\ngulp.task('babel', () => {\n  return gulp.src('app/scripts.babel/**/*.js')\n      .pipe($.babel({\n        presets: ['es2015']\n      }))\n      .pipe(gulp.dest('app/scripts'));\n});\n<% } %>\ngulp.task('clean', del.bind(null, ['.tmp', 'dist']));\n\ngulp.task('watch', ['lint'<% if (babel) { %>, 'babel'<% } %>], () => {\n  $.livereload.listen();\n\n  gulp.watch([\n    'app/*.html',\n    'app/scripts/**/*.js',\n    'app/images/**/*',\n    'app/styles/**/*',\n    'app/_locales/**/*.json'\n  ]).on('change', $.livereload.reload);\n\n  gulp.watch('app/scripts<% if (babel) { %>.babel<% } %>/**/*.js', ['lint'<% if (babel) { %>, 'babel'<% } %>]);<% if (sass) { %>\n  gulp.watch('app/styles.scss/**/*.scss', ['styles']);<% } %>\n  gulp.watch('bower.json', ['wiredep']);\n});\n\ngulp.task('size', () => {\n  return gulp.src('dist/**/*').pipe($.size({title: 'build', gzip: true}));\n});\n\ngulp.task('wiredep', () => {\n  gulp.src('app/*.html')\n    .pipe(wiredep({\n      ignorePath: /^(\\.\\.\\/)*\\.\\./\n    }))\n    .pipe(gulp.dest('app'));\n});\n\ngulp.task('package', function () {\n  var manifest = require('./dist/manifest.json');\n  return gulp.src('dist/**')\n      .pipe($.zip('<%= appname %>-' + manifest.version + '.zip'))\n      .pipe(gulp.dest('package'));\n});\n\ngulp.task('build', (cb) => {\n  runSequence(\n    'lint'<% if (babel) { %>, 'babel'<% } %>, 'chromeManifest',\n    ['html', 'images', 'extras'],\n    'size', cb);\n});\n\ngulp.task('default', ['clean'], cb => {\n  runSequence('build', cb);\n});\n"}